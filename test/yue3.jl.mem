        - 
        - using Hecke
        - include("../src/HeckeExt.jl")
        - include("../src/AlgebraicSolvers.jl")
        - 
        - # module aliasing
        - HKE = Main.HeckeExt
        - AS = Main.AlgebraicSolvers
        - 
        - 
        - function raw_sol_test(P,sol)
        -     return [p(X=>sol.entries[i,2:size(sol,2)]) for i in 1:size(sol,1),  p in P]
        - end
        - 
        - function rel_error(P,sol)
       48     return [p(X=>sol.entries[i,:]) for i in 1:size(sol,1),  p in P]
        - end
        - 
        - # For now, we need a fairly large prime. p=7 goes wrong fairly quickly.
        - # The critical case is p=89.
        - 
        - # At high precision there are stubborn convergence problems...
        - p = 109
        - Qp = PadicField(p,20)
        - function Base.zero(X::Type{padic})
        0     return Qp(0)
        - end
        - 
        - X = AS.@Ring a c
        - n = length(X)
        - 
        - ## Note: The system below was designed to be evil for p=89.
        - P = [
        - -43868231516999844828310246117515417801500080841*a^3*c^6-14193739651583395988549026156690505570333613*a^2*c^7-30039021941941114191228136228290512071*a*c^8+33663377792033017744226887592515669143875374629*c^9+218140786245837113636187114295137712556220*a^3*c^5-4803571350941276753640772686682730690096925177480*a^2*c^6-1554293189569099280698514653529033369057322820*a*c^7+79335303509881219070140601873773569248*c^8+61612684714890596535702840052230123260944622000*a^3*c^4+15804346117367097052900926597226818914548575*a^2*c^5-262995323783985824642885994787517663236568222391874*a*c^6+3386854908690700974767862912475753858068031*c^7+6949605236923474012066087830495962928689963662366220*a^3*c^3+4497435227777341303969153806394399970887259458710*a^2*c^4-8852053587686398660645630962544432064210832*a*c^5-5053423731789250183850058410463077976180950906*c^6+28002230144376087221113073375996637001763800*a^3*c^2+380490886721562717199546543003472735293678658221362720*a^2*c^3-11442722428309228625259185975815183384678636935*a*c^4-106883
        - ];
        - 
        - 
        - P = [p*Qp(1) for p in P];
        - 
        - 
        - #matlist, F, B, N, Nr, R = AS.solve_macaulay(P,X,15,true);
        - sol = AS.solve_macaulay(P,X,20)
        - 
        - println("\n-- sol ")
        - println(sol,"\n")
        - 
        - Er = rel_error(P,sol)
        - println("-- Rel error: ")
        - display(Er)
        - println()
        - 
        - 
        - 
