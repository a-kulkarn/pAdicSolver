
using Hecke
include("../src/HeckeExt.jl")
include("../src/AlgebraicSolvers.jl")

# module aliasing
HKE = Main.HeckeExt
AS = Main.AlgebraicSolvers


function raw_sol_test(P,sol)
    return [p(X=>sol.entries[i,2:size(sol,2)]) for i in 1:size(sol,1),  p in P]
end

function rel_error(P,sol)
    return [p(X=>sol.entries[i,:]) for i in 1:size(sol,1),  p in P]
end

# For now, we need a fairly large prime. p=7 goes wrong fairly quickly.
Qp = PadicField(89,6)
function Base.zero(X::Type{padic})
    return Qp(0)
end


X = AS.@Ring p12 p13 p14 p23 p24
n = length(X)


P = [
2636854332812647124486877*p24^27+93220061212030764232766672482*p24^26+1049671899190646206992129722*p24^25+19654500928715044315556759*p24^24+56950314408626641901273*p24^23+657833353807196455568561177*p24^22+3368004838502005882658857*p24^21+197901277415171521325053*p24^20+2501008121403814928756*p24^19+7330966077265836646136759*p24^18+236276849105058638254777*p24^17+349871277475686701769*p24^16+12210190971220787116*p24^15+70376799168359543975711*p24^14+2766556924649472978432*p24^13+14745657311948667456*p24^12+316360849092836665*p24^11+2388356079726091433547*p24^10+22269025108686260640*p24^9+177572104079349294*p24^8+1432258844413850*p24^7+21566592662166831806*p24^6+148951770659278094*p24^5+494534289118920*p24^4+31163709726747*p24^3+219337409946182821*p24^2+2186926427926161946648*p24+12556659670298524991586393,184540484963470867783300*p23+9017556292080199682426520*p24^26+172197229307867995406701063132*p24^25+17704085944895479783838819*p24^24+13414484771429856344244218*p24^23+163735043201597769001920*p24^22+1704726336768495667959848692*p24^21+2839972154314924174068897*p24^20+218880588661167511216959*p24^19+1537141787049127594735*p24^18+9627314374976061411343535*p24^17+162354356147201999357880*p24^16+987658297765061976507*p24^15+13556074239873461447*p24^14+77172819592326556939552*p24^13+1868712841689700125209*p24^12+25003570141066674284*p24^11+305951137164683186*p24^10+1724572330051539182210*p24^9+17890496926234273635*p24^8+309567698431324464*p24^7+3844273364921592*p24^6+30320987199008524586*p24^5+208951508826294177*p24^4+1640113691396573*p24^3+28224515317875*p24^2+153454641558580087*p24+1802117794771656925025,30374217257462*p14+11603958455576898379490690239892*p24^26+78681957634129275187748753916*p24^25+842194657355180306742594049*p24^24+20394607482682032504615379*p24^23+13849352321300583107899445187*p24^22+738851105702755624750404456*p24^21+15781043912818751310429904*p24^20+7041271695158830362637*p24^19+1380608230391644077126070921*p24^18+16474738276872145079018269*p24^17+238236417620018072500647*p24^16+1847129425166069500584*p24^15+11524917640293981175983420*p24^14+177069870554535779827556*p24^13+1860640516567504087788*p24^12+6863320193374157502*p24^11+60157255865721487061334*p24^10+210386957186732027502451*p24^9+3681397131346883415*p24^8+20167039447927146*p24^7+1864044559460340234536*p24^6+4326366604088357990*p24^5+277303666480602257*p24^4+800238250015134*p24^3+25439293602559107624*p24^2+2676198175514149605037*p24+22304717971274279905,745797285961743*p13+130189520533967289578033*p24^26+7093351663042924893216567*p24^25+15433522792954316616176168*p24^24+13294448070961590158273*p24^23+47003041992878206821*p24^22+169723142695788018399477*p24^21+7093580063807256277837*p24^20+1962021238621397707173*p24^19+12609419751513943847*p24^18+1739647207288099587931*p24^17+2315539452220199440743*p24^16+16506026958989765059*p24^15+5594785183628292*p24^14+12117294222524510161*p24^13+6606933082367325976*p24^12+121350405513922981*p24^11+1161310286815838*p24^10+244451896517425567*p24^9+306626302332293716*p24^8+100651844280562*p24^7+25968939268852*p24^6+879184004224531*p24^5+3769872270611570*p24^4+36899592916202*p24^3+28198824758377*p24^2+45467960818444020*p24+17243164598968830571,247027222347870934*p12+21331937756581103977594113*p24^26+1562075569079970598681555199*p24^25+21072519804841665480501674*p24^24+194823686010242724048482*p24^23+1062098077476521535561*p24^22+21077865282935176855291050*p24^21+78821459441906476989202*p24^20+1026635131630154419054*p24^19+855114883624143809017*p24^18+190883806583897709636436*p24^17+1189543579407800373091*p24^16+10964191901081867439*p24^15+15303739048435307128*p24^14+858249518272790387955*p24^13+21762408353026416905*p24^12+258828985371907485*p24^11+8128114261596755*p24^10+9964778581143603778*p24^9+318238985707393034*p24^8+2808312470991441*p24^7+2695234448466048*p24^6+116062146245402612*p24^5+2685326602972596*p24^4+38667803048335*p24^3+10601041988808*p24^2+101030965967198252*p24+1853315672894448028514
]

P = [p*Qp(1) for p in P];


# #matlist, F, B, N, Nr = AS.solve_macaulay(P,X);
sol = AS.solve_macaulay(P,X)

# println("\n-- sol ")
# println(sol,"\n")

# Er = rel_error(P,sol)
# println("-- Rel error: ")
# display(Er)
# println()


