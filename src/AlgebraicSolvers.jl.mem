        - 
        - # Somehow enforce this dependency.
        - include("HeckeExt.jl")
        - 
        - ####################
        - 
531696103 module AlgebraicSolvers
        - 
        -   using MultivariatePolynomials
        -   using DynamicPolynomials
        -   using Hecke
        -   using Main.HeckeExt
        - 
        -   degree = DynamicPolynomials.maxdegree
        - 
        -   export coeftype
        -   coeftype(::Type{Polynomial{C, T}}) where {C, T} = T
        -   coeftype(p::Polynomial{C, T}) where {C, T} = T
        - 
        -   Base.one(X::Vector{PolyVar{true}}) = monomials(X,0)[1]
        - 
        -   include("mindex.jl")
        -   include("matrix.jl")
        -   include("pmatrix_util.jl")
        -   include("macaulay.jl")
        -   #include("newton.jl")
        -   #include("toric.jl")
        - 
        - 
        - 
        -   function buildpolyvar(::Type{PV}, arg, var) where PV
      608     :($(esc(arg)) = $var)
        -   end
        - 
        -   export @Ring
        -   macro Ring(args...)
   641304     X = DynamicPolynomials.PolyVar{true}[DynamicPolynomials.PolyVar{true}(string(arg)) for arg in args]
   234542     V = [buildpolyvar(DynamicPolynomials.PolyVar{true}, args[i], X[i]) for i in 1:length(X)]
   403013     push!(V, :(TMP = $X) )
  2298861     reduce((x,y) -> :($x; $y), V; init = :() )
        -   end
        - 
        -   export monomials
        -   monomials = DynamicPolynomials.monomials
        - 
        - end
        - 
